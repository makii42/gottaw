# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      # specify the version
      - image: circleci/golang:1.9
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/makii42/gottaw
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: go get -u -v github.com/Masterminds/glide
      - run: go get -u -v github.com/golang/mock/gomock
      - run: go get -u -v github.com/golang/mock/mockgen
      - run: go get -u -v github.com/golang/dep/cmd/dep
      - run: go get -u -v github.com/mitchellh/gox
      - run: dep ensure
      - run: go generate $(glide novendor)
      - run: go test -v $(glide novendor)
      - run: go build .
      - run: ./gottaw --help
      - run: ./gottaw defaults
      - run: gox -output="dist/{{.Dir}}_{{.OS}}_{{.Arch}}" --osarch="linux/386 linux/amd64 linux/arm darwin/386 darwin/amd64 windows/386 windows/adm64" 


  dist:
    docker:
      - image: tsub/ghr
    working_directory: /go/src/github.com/makii42/gottaw
    steps: 
      - checkout 
      - run: ls -la
      - run: ls -la ./dist/


workflows:
  version: 2
  build_code_and_dist:
    jobs: 
      - build
      - dist:
        requires:
          - build